package com.wd.tech.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wd.tech.bean.FindConversationList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FIND_CONVERSATION_LIST".
*/
public class FindConversationListDao extends AbstractDao<FindConversationList, Long> {

    public static final String TABLENAME = "FIND_CONVERSATION_LIST";

    /**
     * Properties of entity FindConversationList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property HeadPic = new Property(1, String.class, "headPic", false, "HEAD_PIC");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "NICK_NAME");
        public final static Property Pwd = new Property(3, String.class, "pwd", false, "PWD");
        public final static Property UserId = new Property(4, int.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(5, String.class, "userName", false, "USER_NAME");
    }


    public FindConversationListDao(DaoConfig config) {
        super(config);
    }
    
    public FindConversationListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FIND_CONVERSATION_LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"HEAD_PIC\" TEXT," + // 1: headPic
                "\"NICK_NAME\" TEXT," + // 2: nickName
                "\"PWD\" TEXT," + // 3: pwd
                "\"USER_ID\" INTEGER NOT NULL ," + // 4: userId
                "\"USER_NAME\" TEXT);"); // 5: userName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FIND_CONVERSATION_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FindConversationList entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String headPic = entity.getHeadPic();
        if (headPic != null) {
            stmt.bindString(2, headPic);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(4, pwd);
        }
        stmt.bindLong(5, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(6, userName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FindConversationList entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String headPic = entity.getHeadPic();
        if (headPic != null) {
            stmt.bindString(2, headPic);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(4, pwd);
        }
        stmt.bindLong(5, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(6, userName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public FindConversationList readEntity(Cursor cursor, int offset) {
        FindConversationList entity = new FindConversationList( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // headPic
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pwd
            cursor.getInt(offset + 4), // userId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // userName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FindConversationList entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setHeadPic(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPwd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserId(cursor.getInt(offset + 4));
        entity.setUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FindConversationList entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FindConversationList entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FindConversationList entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
