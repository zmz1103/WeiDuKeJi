package com.wd.tech.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wd.tech.bean.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Nickname = new Property(0, String.class, "nickname", false, "NICKNAME");
        public final static Property Phone = new Property(1, String.class, "phone", false, "PHONE");
        public final static Property Pwd = new Property(2, String.class, "pwd", false, "PWD");
        public final static Property Sessionid = new Property(3, String.class, "sessionid", false, "SESSIONID");
        public final static Property Userid = new Property(4, long.class, "userid", true, "_id");
        public final static Property Username = new Property(5, String.class, "username", false, "USERNAME");
        public final static Property Whethervip = new Property(6, int.class, "whethervip", false, "WHETHERVIP");
        public final static Property Whetherfaceid = new Property(7, int.class, "whetherfaceid", false, "WHETHERFACEID");
        public final static Property Sole = new Property(8, int.class, "sole", false, "SOLE");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"NICKNAME\" TEXT," + // 0: nickname
                "\"PHONE\" TEXT," + // 1: phone
                "\"PWD\" TEXT," + // 2: pwd
                "\"SESSIONID\" TEXT," + // 3: sessionid
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 4: userid
                "\"USERNAME\" TEXT," + // 5: username
                "\"WHETHERVIP\" INTEGER NOT NULL ," + // 6: whethervip
                "\"WHETHERFACEID\" INTEGER NOT NULL ," + // 7: whetherfaceid
                "\"SOLE\" INTEGER NOT NULL );"); // 8: sole
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(1, nickname);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(3, pwd);
        }
 
        String sessionid = entity.getSessionid();
        if (sessionid != null) {
            stmt.bindString(4, sessionid);
        }
        stmt.bindLong(5, entity.getUserid());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(6, username);
        }
        stmt.bindLong(7, entity.getWhethervip());
        stmt.bindLong(8, entity.getWhetherfaceid());
        stmt.bindLong(9, entity.getSole());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(1, nickname);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(3, pwd);
        }
 
        String sessionid = entity.getSessionid();
        if (sessionid != null) {
            stmt.bindString(4, sessionid);
        }
        stmt.bindLong(5, entity.getUserid());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(6, username);
        }
        stmt.bindLong(7, entity.getWhethervip());
        stmt.bindLong(8, entity.getWhetherfaceid());
        stmt.bindLong(9, entity.getSole());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 4);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // nickname
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phone
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pwd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sessionid
            cursor.getLong(offset + 4), // userid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // username
            cursor.getInt(offset + 6), // whethervip
            cursor.getInt(offset + 7), // whetherfaceid
            cursor.getInt(offset + 8) // sole
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setNickname(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPhone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPwd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSessionid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserid(cursor.getLong(offset + 4));
        entity.setUsername(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWhethervip(cursor.getInt(offset + 6));
        entity.setWhetherfaceid(cursor.getInt(offset + 7));
        entity.setSole(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setUserid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getUserid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
